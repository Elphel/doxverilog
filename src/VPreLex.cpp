#define yy_create_buffer VPreLex_create_buffer
#define yy_delete_buffer VPreLex_delete_buffer
#define yy_scan_buffer VPreLex_scan_buffer
#define yy_scan_string VPreLex_scan_string
#define yy_scan_bytes VPreLex_scan_bytes
#define yy_flex_debug VPreLex_flex_debug
#define yy_init_buffer VPreLex_init_buffer
#define yy_flush_buffer VPreLex_flush_buffer
#define yy_load_buffer_state VPreLex_load_buffer_state
#define yy_switch_to_buffer VPreLex_switch_to_buffer
#define yyin VPreLexin
#define yyleng VPreLexleng
#define yylex VPreLexlex
#define yyout VPreLexout
#define yyrestart VPreLexrestart
#define yytext VPreLextext

#line 19 "c:\\Boot\\doxygen\\src\\VPreLex.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yytext_ptr -= yy_more_len; \
	yyleng = (int) (yy_cp - yytext_ptr); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 100
#define YY_END_OF_BUFFER 101
static yyconst long int yy_accept[492] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  101,   98,   96,   92,   95,   97,   14,   98,
       93,   98,   98,   96,   95,   98,   89,   87,   89,   89,
       88,   17,   15,   17,   20,   16,   99,   33,   32,   33,
       31,   46,   39,   48,   38,   41,   34,   35,   48,   48,
       44,   48,   45,   46,   55,   53,   57,   52,   57,   57,
       57,   62,   60,   62,   62,   61,   62,   77,   66,   78,
       65,   67,   72,   73,   78,   74,   78,   70,   71,   78,
       28,   27,   28,   30,   99,   25,   24,   25,   25,   83,

       81,   83,   83,   82,   96,   92,    0,   85,   84,   93,
        0,   93,   21,   90,    0,   90,   90,   90,   90,   90,
       90,   96,    0,    0,    0,   90,   87,    0,   86,   88,
       15,    0,   16,   19,   18,   19,   32,    0,   46,   39,
        0,   36,   37,   47,   40,    0,   43,    0,   55,   53,
        0,   49,   51,   56,   54,    0,   60,    0,   58,   61,
       59,    0,   77,   66,    0,   63,   64,   69,   75,    0,
       27,    0,   29,   24,    0,    0,   81,    0,    0,    0,
       82,    0,    0,    0,    0,   84,   84,    0,   84,   84,
       84,   94,   93,   90,    0,   90,    0,   90,   90,   90,

       90,   90,   90,   90,   90,   90,    0,   90,    0,   37,
        0,   51,   51,   64,   75,    0,   75,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   84,   84,   84,   93,   91,   22,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
        0,   90,   42,   50,    0,   76,   68,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       84,   84,   84,   90,   90,   90,    3,   90,   90,   90,
       90,   90,   90,   90,   90,    0,   90,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,   84,   84,   84,   84,   90,   90,   90,    4,    5,
       13,    6,   90,   90,   90,    9,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   84,   84,   84,   84,   90,
       90,    2,    7,   90,   90,   90,    0,    0,    1,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   84,    0,   84,   84,
       90,   90,    8,   90,   90,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   84,    0,
       84,   84,   11,   12,   90,   90,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,   84,    0,   84,
       23,   90,    0,    0,    0,    0,    0,    0,    0,   84,
        0,   90,    0,    0,    0,    0,   84,    0,   10,    0,
        0,    0,    0,   84,    0,   26,    0,    0,    0,   84,
        0,    0,    0,    0,   84,    0,    0,    0,    0,   84,
        0,    0,    0,    0,   84,    0,    0,    0,    0,   84,
        0,    0,    0,    0,   84,    0,    0,    0,    0,   84,
        0,    0,   80,    0,   79,   79,    0,    0,   80,   80,
       80,    0,    0,   79,   79,   79,   79,   79,   80,   79,
        0

    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    5,    1,    1,    1,    1,
        1,    2,    1,    6,    1,    7,    1,    1,    1,    8,
        9,   10,    1,   11,    1,    1,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,    1,    1,    1,
        1,   14,    1,    1,   15,   16,   17,   17,   18,   19,
       20,   21,   22,   17,   17,   23,   24,   25,   26,   27,
       17,   28,   29,   30,   17,   17,   17,   17,   31,   17,
       32,   33,   34,    1,   35,   36,   37,   16,   38,   39,

       40,   41,   20,   21,   42,   17,   17,   43,   24,   44,
       45,   46,   17,   47,   48,   49,   50,   17,   17,   17,
       31,   17,   32,    1,   34,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[51] =
    {   0,
        1,    2,    3,    4,    1,    5,    6,    7,    7,    8,
        9,    8,   10,    1,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,    7,   12,    7,   11,   13,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11
    } ;

static yyconst long int yy_base[530] =
    {   0,
        0,   36,   72,  108,  144,  180,   12,   14,  214,  248,
       52,   55,  284,  320,  354,  388,   21,   88,   25,   27,
      424,  460, 1374, 1375, 1371, 1375,   23, 1375, 1375,    9,
     1336,    0,  491,   91,   94,  536, 1375, 1375,   48, 1359,
        0, 1375, 1375,   86, 1375,    0,   96, 1375, 1375,  120,
     1375,    0, 1375,  122,    0, 1375, 1375, 1375, 1375,   91,
     1375,  125, 1375,  101,    0, 1375,  128,    0, 1375,  123,
      133, 1375, 1375,  135, 1358,    0,  156,    0, 1375,  158,
        0, 1375, 1375, 1375, 1375, 1375,  153, 1375, 1375,  137,
     1375, 1375,  163, 1375,    0, 1375, 1375,  165, 1329, 1375,

     1375,  168,  163,    0, 1366, 1375,  192,  585,  632, 1331,
     1330, 1329, 1375, 1328, 1327,  162,  163,  157,  166,  185,
      189,  204,  207, 1309,  225,  194, 1375,  231, 1375,    0,
     1375,  234,    0, 1375, 1375,  238, 1375,  241,    0, 1375,
      259, 1375,    0, 1375, 1375,  261, 1375, 1303,    0, 1375,
      263, 1375, 1293, 1375, 1375,  265, 1375,  267, 1375,    0,
     1375,  269,    0, 1375,  271, 1375,    0, 1375, 1265, 1264,
     1375,  273, 1375, 1375,  275, 1255, 1375,  296,  679,  726,
        0,    0, 1272,  255, 1262, 1288,  773,  820,  235,  308,
      302, 1375, 1255, 1244, 1243, 1231, 1260,  278,   30,  267,

      268,  272,  299,  273,  301,  274, 1212,  303,  337,    0,
     1247, 1208,  341,    0, 1204, 1203, 1200, 1227, 1193,    0,
     1207,  314, 1188,    0, 1180,  320, 1168, 1182,  142,  324,
     1173,  322, 1165,  366,  368,  398, 1159, 1375, 1375,  349,
      353,  213,  337,  342,  359,  340,  367,   51,  365,  371,
     1147,  372, 1375, 1375,  406, 1375, 1375, 1144, 1173,  400,
      415, 1171,  402,  429,  433, 1166,  450, 1169,  404,  454,
      478,  211,  480,  454,  453,  407, 1130,  377,  408,  455,
      409,  412,  451,  445,  447, 1122,  503, 1111,  481, 1137,
      483,  492, 1120,  491,  478, 1112,  489, 1114,  496, 1113,

      517,  515,  544,  545,  540,  468,  534,  475, 1096, 1095,
     1073, 1072,  510,  514,  518,  411,  553,  556, 1062,  535,
     1082,  546, 1084,  544, 1070,  550, 1072,  579,  548,  551,
      570,  560, 1068,  567, 1068,  593,  600,  594,  598,  570,
      572, 1050, 1049,  581,  575,  582,  616,  625, 1375,  637,
     1035,  599,  615,  596,  614,  641,  620,  617,  630,  647,
      880,  624,  654,  645,  626,  644,  662,  669,  659,  664,
      640,  650,  869,  651,  661,  685,  855,  696,  813,  666,
      701,  812,  673,  676,  681,  691,  770,  686,  715,  689,
      703,  716,  748,  686,  701,  710,  671,  707,  713,  702,

      720,  720,  717,  741,  723,  728,  738,  766,  749,  761,
      643,  730,  618,  754,  750,  767,  758,  764,  763,  789,
      769,  769,  610,  771,  772,  770,  791,  778,  531,  483,
      788,  794,  802,  827,  805, 1375,  809,  811,  814,  823,
      822,  825,  826,  816,  826,  823,  825,  828,  843,  860,
      849,  851,  853,  477,  170,  411,  381,  346,  847,  872,
      854,  856,  858,  866,  875,  867,  862,  865,  869,  877,
      878,  910,  781,  911,  900,  920,  921,  339,  301,  924,
      925,  928,  152,   49,  931,  932,   19,  935, 1375, 1375,
     1375,  939,  952,  965,  978,  991, 1004, 1017, 1030, 1043,

     1056, 1069, 1077, 1090, 1099, 1102, 1104, 1115, 1128, 1141,
     1154, 1167, 1171, 1182, 1189, 1201, 1205, 1216, 1224, 1237,
     1250, 1263, 1276, 1284, 1297, 1310, 1323, 1336, 1349
    } ;

static yyconst long int yy_def[530] =
    {   0,
      492,  492,  493,  493,  494,  494,  495,  495,  496,  496,
      497,  497,  498,  498,  499,  499,  500,  500,  501,  501,
      502,  502,  491,  491,  491,  491,  491,  491,  491,  491,
      503,  504,  505,  491,  491,  505,  491,  491,  491,  491,
      506,  491,  491,  491,  491,  507,  508,  491,  491,  491,
      491,  509,  491,  491,  509,  491,  491,  491,  491,  491,
      491,  510,  491,  509,  511,  491,  491,  511,  491,  491,
      512,  491,  491,  491,  491,  513,  491,  514,  491,  491,
      514,  491,  491,  491,  491,  491,  491,  491,  491,  515,
      491,  491,  491,  491,  516,  491,  491,  491,  491,  491,

      491,  491,  491,  517,  491,  491,  491,  491,  518,  503,
      491,  504,  491,  519,  520,  519,  519,  519,  519,  519,
      519,  491,  491,  491,  491,  519,  491,  491,  491,  506,
      491,  491,  507,  491,  491,  491,  491,  491,  509,  491,
      491,  491,  521,  491,  491,  491,  491,  491,  511,  491,
      491,  491,  522,  491,  491,  491,  491,  491,  491,  513,
      491,  491,  514,  491,  491,  491,  523,  491,  524,  525,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      517,  108,  491,  491,  491,  518,  518,  491,  518,  518,
      518,  491,  504,  519,  491,  520,  491,  519,  519,  519,

      519,  519,  519,  519,  519,  519,  491,  519,  491,  521,
      491,  522,  522,  523,  524,  491,  525,  491,  491,  179,
      491,  491,  491,  180,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  518,  518,  518,  504,  491,  491,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      491,  519,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      518,  518,  518,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  491,  519,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,

      491,  518,  518,  518,  518,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  491,  526,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  518,  518,  518,  518,  519,
      519,  519,  519,  519,  519,  519,  526,  526,  491,  526,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  518,  491,  518,  518,
      519,  519,  519,  519,  519,  526,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  518,  491,
      518,  518,  519,  519,  519,  519,  491,  491,  491,  491,

      491,  491,  491,  491,  491,  491,  491,  518,  491,  518,
      519,  519,  491,  491,  491,  491,  491,  491,  491,  518,
      491,  519,  491,  491,  491,  491,  518,  491,  519,  491,
      491,  491,  491,  518,  491,  491,  491,  491,  491,  518,
      491,  491,  491,  491,  518,  491,  491,  491,  491,  518,
      491,  491,  491,  491,  518,  491,  491,  491,  491,  518,
      491,  491,  491,  491,  518,  491,  491,  491,  491,  518,
      491,  491,  527,  491,  528,  529,  491,  491,  527,  527,
      527,  491,  491,  528,  528,  529,  529,  529,  491,  491,
        0,  491,  491,  491,  491,  491,  491,  491,  491,  491,

      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491
    } ;

static yyconst long int yy_nxt[1426] =
    {   0,
       24,   25,   26,   27,   28,   29,   24,   24,   24,   24,
       24,   30,   24,   24,   49,   50,   49,   50,  108,   51,
      109,   51,  491,   92,   93,  106,  107,   97,   98,   97,
       98,   24,   32,   24,   94,   33,   24,   34,   26,   35,
       28,   29,   24,   24,   24,   24,   24,   30,   24,   24,
      127,  128,  491,   95,   66,   67,   68,   66,   67,   68,
       99,   69,   99,   70,   69,  195,   70,   24,   32,   24,
      242,   36,   37,   37,   38,   39,   37,   37,   37,   37,
       37,   40,   37,   37,   71,   37,  195,   71,  131,  132,
       92,   93,  122,  283,  123,  123,  106,  125,  135,  136,

      142,   94,  143,   37,   37,   37,  147,   37,   37,   37,
       38,   39,   37,   37,   37,   37,   37,   40,   37,   37,
       95,   37,  137,  138,  140,  141,  124,  145,  146,  124,
      150,  151,  152,  148,  153,  155,  156,  157,  158,   37,
       37,   37,  168,   37,   42,   42,   43,   44,   42,   45,
       42,   42,   42,   42,   42,   42,  266,   42,  161,  162,
      164,  165,  166,  490,  167,  171,  172,  174,  175,  170,
      177,  178,  179,  491,  180,   42,   47,   42,  266,   42,
       42,   42,   43,   44,   42,   45,   42,   42,   42,   42,
       42,   42,  195,   42,  106,  107,  198,  195,  195,  200,

      201,  195,  199,  202,  460,  122,  203,  123,  123,  204,
      123,   42,   47,   42,  491,   42,   53,   54,   55,   56,
      195,   57,   58,   59,  195,   60,  123,  106,  125,  195,
      303,  205,  206,  127,  128,  208,  131,  132,  491,  124,
      135,  209,  124,  137,  138,   61,   62,   63,  195,   64,
       53,   54,   55,   56,  276,   57,   58,   59,  234,   60,
      124,  140,  141,  145,  146,  150,  151,  155,  156,  157,
      158,  161,  162,  164,  165,  171,  172,  174,  175,   61,
       62,   63,  229,   64,   72,   72,   73,   74,   72,   72,
       72,   72,   72,   75,   72,   72,  240,   72,  177,  178,

      241,  229,  195,  195,  491,  491,  244,  195,  195,  195,
      248,  491,  250,  195,  243,   72,   77,   72,  245,   72,
       72,   72,   73,   74,   72,   72,   72,   72,   72,   75,
       72,   72,  236,   72,  195,  235,  195,  246,  195,  135,
      209,  260,  247,  254,  255,  249,  252,  263,  267,  269,
      489,   72,   77,   72,  235,   72,   79,   80,   81,   82,
      260,   83,   84,   85,   86,   87,  263,  267,  269,  491,
      274,  491,  195,  213,  275,  195,  277,  195,  278,  281,
      463,  271,  272,  279,  195,   88,   85,   89,  195,   90,
       79,   80,   81,   82,  195,   83,   84,   85,   86,   87,

      195,  491,  195,  280,  272,  282,  195,  195,  254,  255,
      285,  287,  195,  284,  290,  462,  293,  309,  300,   88,
       85,   89,  273,   90,  100,  100,  101,  102,  100,  100,
      100,  100,  100,  100,  100,  103,  290,  100,  293,  291,
      300,  273,  195,  195,  195,  461,  195,  195,  310,  312,
      308,  313,  346,  294,  295,  100,  100,  100,  291,  100,
      100,  100,  101,  102,  100,  100,  100,  100,  100,  100,
      100,  103,  294,  100,  295,  297,  306,  307,  301,  298,
      195,  491,  195,  491,  315,  340,  195,  316,  195,  195,
      195,  100,  100,  100,  297,  100,  113,  301,  298,  302,

      314,  311,  320,  195,  318,  304,  318,  328,  322,  305,
      195,  459,  323,  324,  342,  330,  326,  332,  491,  302,
      327,  436,  320,  115,  304,  116,  328,  322,  305,  117,
      118,  323,  119,  324,  330,  326,  120,  332,  195,  327,
      121,  113,  334,  491,  336,  195,  335,  491,  491,  195,
      343,  341,  344,  195,  318,  345,  318,  348,  349,  350,
      339,  334,  328,  336,  352,  335,  195,  337,  115,  195,
      116,  338,  354,  356,  117,  118,  358,  119,  126,  361,
      360,  120,  360,  352,  328,  121,  182,  362,  182,  363,
      338,  354,  356,  365,  367,  358,  368,  491,  361,  183,

      378,  491,  378,  491,  371,  195,  372,  195,  363,  362,
      195,  184,  365,  185,  336,  370,  195,  195,  349,  376,
      373,  183,  369,  374,  379,  375,  348,  349,  350,  352,
      184,  380,  185,  187,  356,  188,  336,  370,  348,  349,
      350,  369,  381,  379,  381,  382,  189,  383,  360,  430,
      360,  352,  386,  380,  387,  368,  356,  368,  190,  363,
      191,  388,  491,  367,  382,  368,  423,  491,  189,  383,
      368,  386,  368,  387,  393,  195,  384,  190,  195,  191,
      220,  363,  220,  388,  394,  195,  195,  349,  376,  391,
      395,  389,  392,  221,  400,  384,  195,  378,  390,  378,

      396,  403,  381,  404,  381,  222,  491,  223,  413,  328,
      389,  392,  405,  400,  407,  221,  409,  390,  491,  491,
      403,  195,  404,  415,  222,  398,  223,  224,  328,  224,
      401,  336,  405,  407,  414,  409,  195,  410,  417,  411,
      225,  352,  408,  415,  398,  195,  412,  416,  356,  401,
      336,  328,  226,  414,  227,  418,  363,  410,  417,  419,
      352,  408,  225,  421,  491,  195,  416,  356,  424,  491,
      328,  226,  422,  227,  187,  363,  188,  418,  352,  419,
      420,  425,  480,  195,  481,  421,  356,  189,  426,  336,
      424,  363,  491,  428,  491,  431,  432,  352,  433,  190,

      406,  191,  420,  425,  195,  356,  435,  426,  336,  189,
      363,  429,  428,  427,  431,  432,  437,  433,  190,  434,
      191,  188,  438,  188,  439,  435,  491,  441,  444,  491,
      491,  442,  427,  443,  231,  437,  446,  445,  434,  447,
      448,  438,  402,  399,  439,  449,  232,  441,  233,  440,
      444,  442,  451,  443,  452,  450,  231,  453,  446,  445,
      454,  447,  448,  491,  449,  232,  456,  233,  457,  440,
      458,  451,  464,  452,  450,  491,  453,  455,  491,  466,
      491,  467,  454,  468,  469,  471,  472,  474,  456,  473,
      457,  464,  458,  470,  397,  475,  476,  465,  466,  455,

      467,  485,  468,  486,  195,  472,  469,  471,  473,  474,
      385,  477,  482,  477,  482,  470,  465,  475,  476,  478,
      483,  488,  477,  486,  477,  480,  480,  481,  481,  482,
      478,  482,  485,  488,  486,  486,  488,  483,  486,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  110,  377,  195,  195,  110,  110,  366,  110,
      112,  364,  359,  357,  112,  112,  112,  112,  112,  112,

      112,  112,  112,  114,  355,  353,  351,  195,  195,  114,
      114,  130,  130,  133,  133,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  139,  139,
      195,  195,  333,  139,  331,  329,  139,  139,  139,  325,
      139,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  149,  149,  321,  319,  149,  149,
      149,  317,  149,  149,  149,  195,  149,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      160,  160,  163,  163,  299,  296,  292,  163,  289,  288,
      286,  163,  163,  169,  237,  270,  268,  265,  264,  169,

      169,  173,  173,  262,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  181,  181,  186,  186,  261,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  194,
      259,  258,  257,  194,  194,  216,  194,  196,  256,  216,
      213,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      210,  210,  253,  251,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  212,  212,  239,  195,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  214,  214,  238,  195,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  215,
      237,  491,  230,  215,  215,  228,  215,  217,  219,  218,

      216,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  479,  479,  213,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  484,  484,  211,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  487,
      487,  207,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  197,  195,  193,  192,  111,  105,  176,  159,
      129,  111,  105,  491,   23,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,

      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491
    } ;

static yyconst long int yy_chk[1426] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    7,    7,    8,    8,   30,    7,
       30,    8,  487,   17,   17,   27,   27,   19,   19,   20,
       20,    1,    1,    1,   17,    1,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
       39,   39,  484,   17,   11,   11,   11,   12,   12,   12,
       19,   11,   20,   11,   12,  199,   12,    2,    2,    2,
      199,    2,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,   11,    3,  248,   12,   44,   44,
       18,   18,   34,  248,   34,   35,   35,   35,   47,   47,

       60,   18,   60,    3,    3,    3,   64,    3,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
       18,    4,   50,   50,   54,   54,   34,   62,   62,   35,
       67,   67,   70,   64,   70,   71,   71,   74,   74,    4,
        4,    4,   90,    4,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,  229,    5,   77,   77,
       80,   80,   87,  483,   87,   93,   93,   98,   98,   90,
      102,  102,  103,  455,  103,    5,    5,    5,  229,    5,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,  118,    6,  107,  107,  116,  116,  117,  118,

      118,  119,  117,  118,  455,  122,  119,  122,  123,  119,
      123,    6,    6,    6,  272,    6,    9,    9,    9,    9,
      120,    9,    9,    9,  121,    9,  125,  125,  125,  126,
      272,  120,  121,  128,  128,  126,  132,  132,  189,  122,
      136,  136,  123,  138,  138,    9,    9,    9,  242,    9,
       10,   10,   10,   10,  242,   10,   10,   10,  189,   10,
      125,  141,  141,  146,  146,  151,  151,  156,  156,  158,
      158,  162,  162,  165,  165,  172,  172,  175,  175,   10,
       10,   10,  184,   10,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,  198,   13,  178,  178,

      198,  184,  200,  201,  479,  191,  201,  202,  204,  206,
      204,  190,  206,  198,  200,   13,   13,   13,  202,   13,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,  191,   14,  203,  190,  205,  203,  208,  209,
      209,  222,  203,  213,  213,  205,  208,  226,  230,  232,
      478,   14,   14,   14,  190,   14,   15,   15,   15,   15,
      222,   15,   15,   15,   15,   15,  226,  230,  232,  234,
      240,  235,  243,  213,  241,  246,  243,  244,  243,  246,
      458,  234,  235,  244,  240,   15,   15,   15,  241,   15,
       16,   16,   16,   16,  245,   16,   16,   16,   16,   16,

      249,  236,  247,  245,  235,  247,  250,  252,  255,  255,
      250,  252,  278,  249,  260,  457,  263,  278,  269,   16,
       16,   16,  236,   16,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,  260,   21,  263,  261,
      269,  236,  276,  279,  281,  456,  316,  282,  279,  281,
      276,  282,  316,  264,  265,   21,   21,   21,  261,   21,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,  264,   22,  265,  267,  274,  275,  270,  267,
      284,  271,  285,  273,  284,  306,  283,  285,  275,  274,
      280,   22,   22,   22,  267,   22,   33,  270,  267,  271,

      283,  280,  289,  306,  287,  273,  287,  295,  291,  273,
      308,  454,  291,  292,  308,  297,  294,  299,  302,  271,
      294,  430,  289,   33,  273,   33,  295,  291,  273,   33,
       33,  291,   33,  292,  297,  294,   33,  299,  287,  294,
       33,   36,  301,  305,  302,  313,  301,  303,  304,  314,
      313,  307,  314,  315,  317,  315,  317,  318,  318,  318,
      305,  301,  329,  302,  320,  301,  429,  303,   36,  307,
       36,  304,  322,  324,   36,   36,  326,   36,   36,  330,
      328,   36,  328,  320,  329,   36,  108,  331,  108,  332,
      304,  322,  324,  334,  336,  326,  336,  338,  330,  108,

      352,  339,  352,  337,  340,  340,  341,  341,  332,  331,
      345,  108,  334,  108,  337,  339,  344,  346,  347,  347,
      344,  108,  338,  345,  354,  346,  348,  348,  348,  353,
      108,  355,  108,  109,  357,  109,  337,  339,  350,  350,
      350,  338,  356,  354,  356,  358,  109,  359,  360,  423,
      360,  353,  362,  355,  365,  363,  357,  363,  109,  364,
      109,  366,  369,  367,  358,  367,  413,  370,  109,  359,
      368,  362,  368,  365,  371,  371,  360,  109,  411,  109,
      179,  364,  179,  366,  372,  372,  374,  376,  376,  369,
      374,  367,  370,  179,  380,  360,  375,  378,  368,  378,

      375,  383,  381,  384,  381,  179,  391,  179,  397,  385,
      367,  370,  386,  380,  388,  179,  390,  368,  389,  392,
      383,  394,  384,  400,  179,  378,  179,  180,  385,  180,
      381,  391,  386,  388,  398,  390,  395,  392,  403,  395,
      180,  399,  389,  400,  378,  396,  396,  401,  402,  381,
      391,  405,  180,  398,  180,  404,  406,  392,  403,  407,
      399,  389,  180,  409,  410,  412,  401,  402,  414,  408,
      405,  180,  412,  180,  187,  406,  187,  404,  415,  407,
      408,  416,  473,  393,  473,  409,  417,  187,  418,  410,
      414,  419,  420,  421,  427,  424,  425,  415,  426,  187,

      387,  187,  408,  416,  422,  417,  428,  418,  410,  187,
      419,  422,  421,  420,  424,  425,  431,  426,  187,  427,
      187,  188,  432,  188,  433,  428,  440,  435,  439,  445,
      434,  437,  420,  438,  188,  431,  441,  440,  427,  442,
      443,  432,  382,  379,  433,  444,  188,  435,  188,  434,
      439,  437,  446,  438,  447,  445,  188,  448,  441,  440,
      449,  442,  443,  450,  444,  188,  451,  188,  452,  434,
      453,  446,  459,  447,  445,  460,  448,  450,  465,  461,
      470,  462,  449,  463,  464,  466,  467,  469,  451,  468,
      452,  459,  453,  465,  377,  470,  471,  460,  461,  450,

      462,  475,  463,  475,  373,  467,  464,  466,  468,  469,
      361,  472,  474,  472,  474,  465,  460,  470,  471,  472,
      474,  476,  477,  476,  477,  480,  481,  480,  481,  482,
      477,  482,  485,  486,  485,  486,  488,  482,  488,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  494,  494,  494,  494,  494,
      494,  494,  494,  494,  494,  494,  494,  494,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  496,  496,  496,  496,  496,  496,  496,  496,  496,

      496,  496,  496,  496,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
      502,  502,  503,  351,  343,  342,  503,  503,  335,  503,
      504,  333,  327,  325,  504,  504,  504,  504,  504,  504,

      504,  504,  504,  505,  323,  321,  319,  312,  311,  505,
      505,  506,  506,  507,  507,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  509,  509,
      310,  309,  300,  509,  298,  296,  509,  509,  509,  293,
      509,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  511,  511,  290,  288,  511,  511,
      511,  286,  511,  511,  511,  277,  511,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      513,  513,  514,  514,  268,  266,  262,  514,  259,  258,
      251,  514,  514,  515,  237,  233,  231,  228,  227,  515,

      515,  516,  516,  225,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  517,  517,  518,  518,  223,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  519,
      221,  219,  218,  519,  519,  217,  519,  520,  216,  215,
      212,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      521,  521,  211,  207,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  522,  522,  197,  196,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  523,  523,  195,  194,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  524,
      193,  186,  185,  524,  524,  183,  524,  525,  176,  170,

      169,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  527,  527,  153,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  528,  528,  148,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  529,
      529,  124,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  115,  114,  112,  111,  110,  105,   99,   75,
       40,   31,   25,   23,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,

      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() (yy_more_flag = 1)
#define YY_MORE_ADJ yy_more_len
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "..\\src\\VPreLex.l"
#define INITIAL 0
#define YY_STACK_USED 1
#line 8 "..\\src\\VPreLex.l"
/******************************************************************************
 * DESCRIPTION: Verilog Preprocessor Lexer
 *
 * This file is part of Verilog-Perl.
 *
 * Author: Wilson Snyder <wsnyder@wsnyder.org>
 *
 * Code available from: http://www.veripool.org/systemperl
 *
 ******************************************************************************
 *
 * Copyright 2000-2013 by Wilson Snyder.  This program is free software;
 * you can redistribute it and/or modify it under the terms of either the GNU
 * Lesser General Public License Version 3 or the Perl Artistic License Version 2.0.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 *****************************************************************************
 * Do not use Flex in C++ mode.  It has bugs with yyunput() which result in
 * lost characters.
 *****************************************************************************/

#include "VPreProc.h"
#include "VPreLex.h"
#include <cstdio>
#include <cstdarg>
#include <cstring>
#include <iostream>
#include "qcstring.h"
#include "define.h"
// Flex 2.5.35 has compile warning in ECHO, so we'll default our own rule
#define ECHO yyerror_f("Missing VPreLex.l rule: ECHO rule invoked in state %d: %s", YY_START, yytext);
struct VPreProcImp;
VPreLex* VPreLex::s_currentLexp = NULL;	// Current lexing point

#define LEXP VPreLex::s_currentLexp

#define linenoInc()  { LEXP->linenoInc(); }
static bool pedantic() { return LEXP->m_pedantic; }
static bool keepWhitespace() { return LEXP->m_keepWhitespace; }
static void appendDefValue(const char* t, size_t l) { LEXP->appendDefValue(t,l); }
void yyerrorx(char* msg) { LEXP->curFilelinep()->error(msg); }

#define YY_INPUT(buf,result,max_size) \
    result = LEXP->inputToLex(buf,max_size);

// Accessors, because flex keeps changing the type of yyleng
char* yyourtext() { return yytext; }
size_t yyourleng() { return (size_t)yyleng; }
void yyourtext(const char* textp, size_t size) { yytext=(char*)textp; yyleng=size; }

void yyerror_f(const char* format, ...) {
    char msg[1024];

    va_list ap;
    va_start(ap,format);
    vsprintf(msg,format,ap);
    va_end(ap);

    yyerrorx(msg);
}

typedef size_t ussize_t;
/**********************************************************************/
#define CMTMODE 1

#define STRMODE 2

#define DEFFPAR 3

#define DEFFORM 4

#define DEFVAL 5

#define DEFCMT 6

#define ARGMODE 7

#define INCMODE 8

#define PRTMODE 9

#define OFFMODE 10

/* drop: Drop Ctrl-Z - can't pass thru or may EOF the output too soon */
/* Where we use symb/symbdef, we must also look for a `` join */
/* Note in the preprocessor \ESCaped is *not* always special; mantis1537/bug441 */
/* Case insensitive; unfortunately ?i: isn't in flex 2.5.4 which is popular */
/**************************************************************/
#line 965 "c:\\Boot\\doxygen\\src\\VPreLex.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 114 "..\\src\\VPreLex.l"


#line 1122 "c:\\Boot\\doxygen\\src\\VPreLex.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_more_len = 0;
		if ( yy_more_flag )
			{
			yy_more_len = yy_c_buf_p - yytext_ptr;
			yy_more_flag = 0;
			}
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 492 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1375 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 116 "..\\src\\VPreLex.l"
{ LEXP->lineDirective(yytext);
					  return(VP_LINE); }
	YY_BREAK
/* Special directives we recognize */
case 2:
YY_RULE_SETUP
#line 120 "..\\src\\VPreLex.l"
{ return(VP_DEFINE); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 121 "..\\src\\VPreLex.l"
{ return(VP_ELSE); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 122 "..\\src\\VPreLex.l"
{ return(VP_ELSIF); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 123 "..\\src\\VPreLex.l"
{ return(VP_ENDIF); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 124 "..\\src\\VPreLex.l"
{ return(VP_IFDEF); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 125 "..\\src\\VPreLex.l"
{ return(VP_IFNDEF); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 126 "..\\src\\VPreLex.l"
{ return(VP_INCLUDE); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 127 "..\\src\\VPreLex.l"
{ return(VP_UNDEF); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 128 "..\\src\\VPreLex.l"
{ return(VP_UNDEFINEALL); }
	YY_BREAK
/* Optional directives we recognize */
case 11:
YY_RULE_SETUP
#line 131 "..\\src\\VPreLex.l"
{ static string rtnfile;
			  rtnfile = '"'; rtnfile += LEXP->curFilelinep()->filename();
			  rtnfile += '"'; yytext=(char*)rtnfile.c_str(); yyleng = rtnfile.length();
			  return (VP_STRING); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 135 "..\\src\\VPreLex.l"
{ static char buf[10];
			  sprintf(buf, "%d",LEXP->curFilelinep()->lineno());
	                  yytext = buf; yyleng = strlen(yytext);
			  return (VP_TEXT); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 139 "..\\src\\VPreLex.l"
{ if (!pedantic()) return (VP_ERROR); else return(VP_DEFREF); }
	YY_BREAK
/* Pass-through strings */
case 14:
YY_RULE_SETUP
#line 142 "..\\src\\VPreLex.l"
{ yy_push_state(STRMODE); yymore(); }
	YY_BREAK
case YY_STATE_EOF(STRMODE):
#line 143 "..\\src\\VPreLex.l"
{ linenoInc(); yyerror_f("EOF in unterminated string"); yyleng=0; yyterminate(); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 144 "..\\src\\VPreLex.l"
{ linenoInc(); yyerror_f("Unterminated string"); BEGIN(INITIAL); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 145 "..\\src\\VPreLex.l"
{ yymore(); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 146 "..\\src\\VPreLex.l"
{ yymore(); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 147 "..\\src\\VPreLex.l"
{ linenoInc(); yymore(); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 148 "..\\src\\VPreLex.l"
{ yymore(); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 149 "..\\src\\VPreLex.l"
{ yy_pop_state();
			  if (LEXP->m_parenLevel || LEXP->m_formalLevel) { appendDefValue(yytext,yyleng); yyleng=0; }
			  else return (VP_STRING); }
	YY_BREAK
/* Stringification */
case 21:
YY_RULE_SETUP
#line 154 "..\\src\\VPreLex.l"
{ return VP_STRIFY; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 155 "..\\src\\VPreLex.l"
{ return VP_BACKQUOTE; }
	YY_BREAK
/* Protected blocks */
case 23:
YY_RULE_SETUP
#line 158 "..\\src\\VPreLex.l"
{ yy_push_state(PRTMODE); yymore(); }
	YY_BREAK
case YY_STATE_EOF(PRTMODE):
#line 159 "..\\src\\VPreLex.l"
{ linenoInc(); yyerror_f("EOF in `protected"); yyleng=0; yyterminate(); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 160 "..\\src\\VPreLex.l"
{ linenoInc(); yymore(); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 161 "..\\src\\VPreLex.l"
{ yymore(); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 162 "..\\src\\VPreLex.l"
{ yy_pop_state(); return (VP_TEXT); }
	YY_BREAK
/* Pass-through include <> filenames */
case YY_STATE_EOF(INCMODE):
#line 165 "..\\src\\VPreLex.l"
{ linenoInc(); yyerror_f("EOF in unterminated include filename"); yyleng=0; yyterminate(); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 166 "..\\src\\VPreLex.l"
{ linenoInc(); yyerror_f("Unterminated include filename"); BEGIN(INITIAL); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 167 "..\\src\\VPreLex.l"
{ yymore(); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 168 "..\\src\\VPreLex.l"
{ yymore(); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 169 "..\\src\\VPreLex.l"
{ yy_pop_state(); return (VP_STRING); }
	YY_BREAK
/* Reading definition formal parenthesis (or not) to begin formal arguments */
/* Note '(' must IMMEDIATELY follow definition name */
case 31:
YY_RULE_SETUP
#line 173 "..\\src\\VPreLex.l"
{ appendDefValue("(",1); LEXP->m_formalLevel=1; BEGIN(DEFFORM); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 174 "..\\src\\VPreLex.l"
{ yy_pop_state(); yytext=(char*)"\n"; unput('\n'); yyleng=1; return VP_DEFFORM; } /* DEFVAL will later grab the return */
	YY_BREAK
case YY_STATE_EOF(DEFFPAR):
#line 175 "..\\src\\VPreLex.l"
{ yy_pop_state(); return VP_DEFFORM; }  /* empty formals */
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 176 "..\\src\\VPreLex.l"
{ 
                              QCString s=yytext;
                              yy_pop_state(); unput(yytext[yyleng-1]); yyleng=0; return VP_DEFFORM; 
                              }  /* empty formals */
	YY_BREAK
/* Reading definition formals (declaration of a define) */
case 34:
YY_RULE_SETUP
#line 182 "..\\src\\VPreLex.l"
{ appendDefValue(yytext,yyleng); yyleng=0; ++LEXP->m_formalLevel; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 183 "..\\src\\VPreLex.l"
{ appendDefValue(yytext,yyleng); yyleng=0; if ((--LEXP->m_formalLevel)==0) { yy_pop_state(); return VP_DEFFORM; } }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 184 "..\\src\\VPreLex.l"
{ yy_push_state(CMTMODE); yymore(); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 185 "..\\src\\VPreLex.l"
{ return (VP_COMMENT);}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 186 "..\\src\\VPreLex.l"
{ }
	YY_BREAK
case YY_STATE_EOF(DEFFORM):
#line 187 "..\\src\\VPreLex.l"
{ linenoInc(); yy_pop_state(); yyerror_f("Unterminated ( in define formal arguments."); yyleng=0; return VP_DEFFORM; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 188 "..\\src\\VPreLex.l"
{ linenoInc(); appendDefValue((char*)"\n",1); } /* Include return so can maintain output line count */
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 189 "..\\src\\VPreLex.l"
{ linenoInc(); appendDefValue((char*)"\\\n",2); } /* Include return so can maintain output line count */
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 190 "..\\src\\VPreLex.l"
{ yy_push_state(STRMODE); yymore(); }  /* Legal only in default values */
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 191 "..\\src\\VPreLex.l"
{ appendDefValue(yytext,yyleng); }  /* Maybe illegal, otherwise in default value */
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 192 "..\\src\\VPreLex.l"
{ appendDefValue(yytext,yyleng); }  /* Maybe illegal, otherwise in default value */
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 193 "..\\src\\VPreLex.l"
{ LEXP->m_formalLevel++; appendDefValue(yytext,yyleng); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 194 "..\\src\\VPreLex.l"
{ LEXP->m_formalLevel--; appendDefValue(yytext,yyleng); }
	YY_BREAK
case 46:
#line 196 "..\\src\\VPreLex.l"
case 47:
#line 197 "..\\src\\VPreLex.l"
case 48:
YY_RULE_SETUP
#line 197 "..\\src\\VPreLex.l"
{ appendDefValue(yytext,yyleng); }
	YY_BREAK
/* Reading definition value (declaration of a define's text) */
case 49:
YY_RULE_SETUP
#line 200 "..\\src\\VPreLex.l"
{ LEXP->m_defCmtSlash=false; yy_push_state(DEFCMT); yymore(); }  /* Special comment parser */
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 201 "..\\src\\VPreLex.l"
{ linenoInc(); appendDefValue((char*)"\n",1); }  /* Spec says // not part of define value */
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 202 "..\\src\\VPreLex.l"
{ return (VP_COMMENT);}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 203 "..\\src\\VPreLex.l"
{ }
	YY_BREAK
case YY_STATE_EOF(DEFVAL):
#line 204 "..\\src\\VPreLex.l"
{ linenoInc(); yy_pop_state(); yytext=(char*)"\n"; yyleng=1; return (VP_DEFVALUE); } /* Technically illegal, but people complained */
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 205 "..\\src\\VPreLex.l"
{ linenoInc(); yy_pop_state(); yytext=(char*)"\n"; yyleng=1; return (VP_DEFVALUE); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 206 "..\\src\\VPreLex.l"
{ linenoInc(); appendDefValue((char*)"\\\n",2); } /* Return, AND \ is part of define value */
	YY_BREAK
case 55:
#line 208 "..\\src\\VPreLex.l"
case 56:
#line 209 "..\\src\\VPreLex.l"
case 57:
YY_RULE_SETUP
#line 209 "..\\src\\VPreLex.l"
{ 
                        QCString s=yytext;
                         appendDefValue(yytext,yyleng);
                          }
	YY_BREAK
/* Comments inside define values - if embedded get added to define value per spec */
/* - if no \{crnl} ending then the comment belongs to the next line, as a non-embedded comment */
/* - if all but (say) 3rd line is missing \ then it's indeterminate */
case 58:
YY_RULE_SETUP
#line 217 "..\\src\\VPreLex.l"
{ yy_pop_state(); appendDefValue(yytext,yyleng); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 218 "..\\src\\VPreLex.l"
{ linenoInc(); LEXP->m_defCmtSlash=true;
	 		  appendDefValue(yytext,yyleng-2); appendDefValue((char*)"\n",1); }  /* Return but not \ */
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 220 "..\\src\\VPreLex.l"
{ linenoInc(); yymore(); if (LEXP->m_defCmtSlash) yyerror_f("One line of /* ... */ is missing \\ before newline");
			  BEGIN(CMTMODE); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 222 "..\\src\\VPreLex.l"
{ yymore(); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 223 "..\\src\\VPreLex.l"
{ yymore(); }
	YY_BREAK
case YY_STATE_EOF(DEFCMT):
#line 224 "..\\src\\VPreLex.l"
{ yyerror_f("EOF in '/* ... */' block comment\n"); yyleng=0; yyterminate(); }
	YY_BREAK
/* Define arguments (use of a define) */
case 63:
YY_RULE_SETUP
#line 227 "..\\src\\VPreLex.l"
{ yy_push_state(CMTMODE); yymore(); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 228 "..\\src\\VPreLex.l"
{ return (VP_COMMENT);}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 229 "..\\src\\VPreLex.l"
{ }
	YY_BREAK
case YY_STATE_EOF(ARGMODE):
#line 230 "..\\src\\VPreLex.l"
{ yyerror_f("EOF in define argument list\n"); yyleng = 0; yyterminate(); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 231 "..\\src\\VPreLex.l"
{ linenoInc(); yytext=(char*)"\n"; yyleng=1; return(VP_WHITE); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 232 "..\\src\\VPreLex.l"
{ yy_push_state(STRMODE); yymore(); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 233 "..\\src\\VPreLex.l"
{ appendDefValue(yytext,yyleng); }  /* Literal text */
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 234 "..\\src\\VPreLex.l"
{ return(VP_STRIFY); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 235 "..\\src\\VPreLex.l"
{ LEXP->m_parenLevel++; appendDefValue(yytext,yyleng); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 236 "..\\src\\VPreLex.l"
{ LEXP->m_parenLevel--; appendDefValue(yytext,yyleng); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 237 "..\\src\\VPreLex.l"
{ LEXP->m_parenLevel++;
			  // Note paren level 0 means before "(" of starting args
			  // Level 1 means "," between arguments
			  // Level 2+ means one argument's internal ()
			  if (LEXP->m_parenLevel>1) {
			      appendDefValue(yytext,yyleng);
			  } else {
			      return (VP_TEXT);
			}}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 246 "..\\src\\VPreLex.l"
{ LEXP->m_parenLevel--;
			  if (LEXP->m_parenLevel>0) {
			      appendDefValue(yytext,yyleng);
			  } else {
			      yy_pop_state(); return (VP_DEFARG);
			}}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 252 "..\\src\\VPreLex.l"
{ if (LEXP->m_parenLevel>1) {
			      appendDefValue(yytext,yyleng);
			  } else {
			      yy_pop_state(); return (VP_DEFARG);
			}}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 257 "..\\src\\VPreLex.l"
{ appendDefValue(yytext,yyleng); }  /* defref in defref - outer macro expands first */
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 258 "..\\src\\VPreLex.l"
{ appendDefValue(yytext,yyleng); }  /* defref in defref - outer macro expands first */
	YY_BREAK
case 77:
#line 260 "..\\src\\VPreLex.l"
case 78:
YY_RULE_SETUP
#line 260 "..\\src\\VPreLex.l"
{ appendDefValue(yytext,yyleng); }
	YY_BREAK
/* Translate offs.  Note final newline not included */
case 79:
YY_RULE_SETUP
#line 263 "..\\src\\VPreLex.l"
{
			  if (LEXP->m_synthesis) { yy_push_state(OFFMODE); }
			  return(VP_COMMENT); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 266 "..\\src\\VPreLex.l"
{
			  if (LEXP->m_synthesis) { yy_pop_state(); }
			  return(VP_COMMENT); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 269 "..\\src\\VPreLex.l"
{ linenoInc(); yymore(); }  /* Need to end the / / */
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 270 "..\\src\\VPreLex.l"
{ }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 271 "..\\src\\VPreLex.l"
{ }
	YY_BREAK
case YY_STATE_EOF(OFFMODE):
#line 272 "..\\src\\VPreLex.l"
{ yyerror_f("EOF in '/*synthesis translate_off*/' region\n"); yyleng=0; yyterminate(); }
	YY_BREAK
/* One line comments. Note final newline not included */
case 84:
YY_RULE_SETUP
#line 275 "..\\src\\VPreLex.l"
{ return (VP_COMMENT); }
	YY_BREAK
/* C-style comments. */
/**** See also DEFCMT */
case 85:
YY_RULE_SETUP
#line 279 "..\\src\\VPreLex.l"
{ yy_push_state(CMTMODE); yymore(); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 280 "..\\src\\VPreLex.l"
{ yy_pop_state(); return(VP_COMMENT); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 281 "..\\src\\VPreLex.l"
{ linenoInc(); yymore(); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 282 "..\\src\\VPreLex.l"
{ yymore(); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 283 "..\\src\\VPreLex.l"
{ yymore(); }
	YY_BREAK
case YY_STATE_EOF(CMTMODE):
#line 284 "..\\src\\VPreLex.l"
{ yyerror_f("EOF in '/* ... */' block comment\n"); yyleng=0; yyterminate(); }
	YY_BREAK
/* Define calls */
/* symbdef prevents normal lex rules from making `\`"foo a symbol {`"foo} instead of a BACKQUOTE */
case 90:
YY_RULE_SETUP
#line 288 "..\\src\\VPreLex.l"
{ 
                                      QCString s=yytext;
                                      s.stripPrefix("`");
                                      DefineDict* gDict = VerilogPreProc::getPreDefineDict();
                                      Define *def=gDict->find(s.data());

                                       if(def)  
                                      {
                                       yytext=def->args.data();
                                      yyleng=def->args.length();
                                       return VP_TEXT;
                                      }
                                      return (VP_DEFREF); 
                                    }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 302 "..\\src\\VPreLex.l"
{ yyleng-=2; return (VP_DEFREF_JOIN); }
	YY_BREAK
/* Generics */
case YY_STATE_EOF(INITIAL):
#line 305 "..\\src\\VPreLex.l"
{ yyterminate(); }  /* A "normal" EOF */
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 306 "..\\src\\VPreLex.l"
{ linenoInc(); yytext=(char*)"\n"; yyleng=1; return(VP_WHITE); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 307 "..\\src\\VPreLex.l"
{
                                static QCString s;
                                s.append(yytext); 
                                s.append("#"); 
                            //    yytext=s.data();
                                return (VP_SYMBOL); 
                                }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 314 "..\\src\\VPreLex.l"
{ yyleng-=2; return (VP_SYMBOL_JOIN); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 315 "..\\src\\VPreLex.l"
{ }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 316 "..\\src\\VPreLex.l"
{ if (!keepWhitespace()) { yytext=(char*)" "; yyleng=1; } return VP_WHITE; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 317 "..\\src\\VPreLex.l"
{ }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 318 "..\\src\\VPreLex.l"
{ 
                         
                         return (VP_TEXT); 
                         }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 323 "..\\src\\VPreLex.l"
{ yymore(); }	/* Prevent hitting ECHO; */
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 324 "..\\src\\VPreLex.l"
ECHO;
	YY_BREAK
#line 1822 "c:\\Boot\\doxygen\\src\\VPreLex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 492 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 492 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 491);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 324 "..\\src\\VPreLex.l"


void VPreLex::pushStateDefArg(int level) {
    // Enter define substitution argument state
    yy_push_state(ARGMODE);
    m_parenLevel = level;
    m_defValue = "";
}

void VPreLex::pushStateDefForm() {
    // Enter define formal arguments state
    yy_push_state(DEFFPAR);  // First is an optional ( to begin args
    m_parenLevel = 0;
    m_defValue = "";
}

void VPreLex::pushStateDefValue() {
    // Enter define value state
    yy_push_state(DEFVAL);
    m_parenLevel = 0;
    m_defValue = "";
}

void VPreLex::pushStateIncFilename() {
    // Enter include <> filename state
    yy_push_state(INCMODE);
    yymore();
}

void VPreLex::debug(int level) {
//#ifdef FLEX_DEBUG
//    yy_flex_debug=0;
//#endif
}
int VPreLex::debug() {
#ifdef FLEX_DEBUG
    return yy_flex_debug;
#else
    return 0;
#endif
}

int VPreLex::lex() {
    VPreLex::s_currentLexp = this;  // Tell parser where to get/put data
    m_tokFilelinep = curFilelinep();  // Remember token start location, may be updated by the lexer later
    return yylex();
}

size_t VPreLex::inputToLex(char* buf, size_t max_size) {
    // We need a custom YY_INPUT because we can't use flex buffers.
    // Flex buffers are limited to 2GB, and we can't chop into 2G pieces
    // because buffers can't end in the middle of tokens.
    // Note if we switched streams here (which we don't) "buf" would be
    // become a stale invalid pointer.
    //
    VPreStream* streamp = curStreamp();
    if (debug()>=10) { cout<<"-  pp:inputToLex ITL s="<<max_size<<" bs="<<streamp->m_buffers.size()<<endl;  dumpStack(); }
    // For testing, use really small chunks
    //if (max_size > 13) max_size=13;
  again:
    size_t got = 0;
    // Get from this stream
    while (got < max_size	// Haven't got enough
	   && !streamp->m_buffers.empty()) {	// And something buffered
	string front = curStreamp()->m_buffers.front(); streamp->m_buffers.pop_front();
	size_t len = front.length();
	if (len > (max_size-got)) {  // Front string too big
	    len = (max_size-got);
	    string remainder = front.substr(len);
	    front = front.substr(0, len);
	    streamp->m_buffers.push_front(remainder);  // Put back remainder for next time
	}
	strncpy(buf+got, front.c_str(), len);
	got += len;
    }
    if (!got) { // end of stream; try "above" file
	bool again=false;
	string forceOut = endOfStream(again/*ref*/);
	streamp = curStreamp();  // May have been updated
	if (forceOut != "") {
	    if (forceOut.length() > max_size) {
		yyerror_f("Output buffer too small for a `line");
	    } else {
		got = forceOut.length();
		strncpy(buf, forceOut.c_str(), got);
	    }
	} else {
	    if (streamp->m_eof) {
		if (debug()) cout<<"-  EOF\n";
	    }
	    got = 0;  // 0=EOF/EOS - although got was already 0.
	    if (again) goto again;
	}
    }
   // if (true) { cout<<"-  pp::inputToLex  got="<<got<<" '"<<string(buf,got)<<"'"<<endl; }
    return got;
}

string VPreLex::endOfStream(bool& againr) {
    // Switch to file or next unputString
   //  VPreProcImp *iimp = this->m_preimpp;	
    againr = false;
    dumpStack();
    if (debug())
    {
  //    cout<<"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"<<endl;
  //    cout<<iimp->m_lineChars<<endl;
  //    cout<<"-EOS state="<<curStreamp()->m_termState<<" at "<<curFilelinep()<<endl;
 //     cout<<"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"<<endl;   
    }
    
    if (curStreamp()->m_eof) return "";   // Don't delete the final "EOF" stream
    bool exited_file = curStreamp()->m_file;
    if (!exited_file) {
	// Midpoint of stream, just change buffers
	delete curStreamp();
	m_streampStack.pop();  // Must work as size>1; EOF is entry 0
	againr = true;
	return "";
    }
    // Multiple steps because we need FLEX to see ending \n and EOS to end
    // any illegal states, like an unterminated `protected region
    else if (!curStreamp()->m_termState) {
	// First shutdown phase for a file
	// Terminate all files with a newline.  This prevents problems if
	// the user had a define without a terminating newline,
	// otherwise the resumed file's next line would get tacked on.
	// Also makes it likely the `line that changes files comes out
	// immediately.
	curStreamp()->m_termState = 1;
	return "\n";  // Exit old file
    }
    else if (curStreamp()->m_termState == 1) {
	// Now the EOF - can't be sent with other characters
	curStreamp()->m_termState = 2;
	return "";  // End of file
    }
    else if (curStreamp()->m_termState == 2) {
	// Now ending `line
	curStreamp()->m_termState = 3;
	return curFilelinep()->lineDirectiveStrg(2);  // Exit old file
    }
    else {
	// Final shutdown phase for a stream, we can finally change the
	// current fileline to the new stream
	curStreamp()->m_termState = 0;
	VFileLine* filelinep = curFilelinep();
	delete curStreamp();
	m_streampStack.pop();  // Must work as size>1; EOF is entry 0
	if (curStreamp()->m_eof) {
	    // EOF doesn't have a "real" fileline, but a linenumber of 0 from init time
	    // Inherit whatever we last parsed so it's more obvious.
	    curFilelinep(filelinep);
	}
	// The caller parser remembered the start location for the text we are parsing,
	// but we've discovered there was a file switch along the way, so update it.
	m_tokFilelinep = curFilelinep();
	//
	if (curStreamp()->m_eof) {
	    return "";
	} else {
	    return curFilelinep()->lineDirectiveStrg(0);  // Reenter resumed file
	}
    }
}

void VPreLex::initFirstBuffer(VFileLine* filelinep) {
    // Called from constructor to make first buffer
    // yy_create_buffer also sets yy_fill_buffer=1 so reads from YY_INPUT
    VPreStream* streamp = new VPreStream(filelinep, this);
    streamp->m_eof = true;
    m_streampStack.push(streamp);
    //
    m_bufferState = yy_create_buffer(NULL, YY_BUF_SIZE);
    yy_switch_to_buffer(m_bufferState);
    yyrestart(NULL);
}

void VPreLex::scanNewFile(VFileLine* filelinep) {
    // Called on new open file.  scanBytesBack will be called next.
    if (streamDepth() > VPreProc::DEFINE_RECURSION_LEVEL_MAX) {
	// The recursive `include in VPreProcImp should trigger first
	yyerror_f("Recursive `define or other nested inclusion");
	curStreamp()->m_eof = true;  // Fake it to stop recursion
    } else {
	VPreStream* streamp = new VPreStream(filelinep, this);
	m_tokFilelinep = curFilelinep();
	streamp->m_file = true;
	scanSwitchStream(streamp);
    }
}

void VPreLex::scanBytes(const string& str) {
    // Note buffers also appended in ::scanBytesBack
    // Not "m_buffers.push_front(string(strp,len))" as we need a `define
    // to take effect immediately, in the middle of the current buffer
    // Also we don't use scan_bytes that would set yy_fill_buffer
    // which would force Flex to bypass our YY_INPUT routine.
    if (streamDepth() > VPreProc::DEFINE_RECURSION_LEVEL_MAX) {
	// More streams if recursive `define with complex insertion
	// More buffers mostly if something internal goes funky
	yyerror_f("Recursive `define or other nested inclusion");
	curStreamp()->m_eof = true;  // Fake it to stop recursion
    } else {
	VPreStream* streamp = new VPreStream(curFilelinep(), this);
	streamp->m_buffers.push_front(str);
	scanSwitchStream(streamp);
    }
}

void VPreLex::scanSwitchStream(VPreStream* streamp) {
    curStreamp()->m_buffers.push_front(currentUnreadChars());
    m_streampStack.push(streamp);
    yyrestart(NULL);
}

void VPreLex::scanBytesBack(const string& str) {
    // Initial creation, that will pull from YY_INPUT==inputToLex
    // Note buffers also appended in ::scanBytes
    if (curStreamp()->m_eof) yyerror_f("scanBytesBack without being under scanNewFile");
    curStreamp()->m_buffers.push_back(str);
}

string VPreLex::currentUnreadChars() {
    // WARNING - Peeking at internals
    if (!currentBuffer()) return "";
    ussize_t left = (yy_n_chars - (yy_c_buf_p - currentBuffer()->yy_ch_buf));
    if (left > 0) {  // left may be -1 at EOS
	*(yy_c_buf_p) = (yy_hold_char);
	return string(yy_c_buf_p, left);
    } else {
	return "";
    }
}

YY_BUFFER_STATE VPreLex::currentBuffer() {
    return YY_CURRENT_BUFFER;
}

char* VPreLex::getInputBuffer() {
    return currentBuffer()->yy_ch_buf;
}

char* VPreLex::getInputBuffer1() {
    return m_bufferState->yy_ch_buf;
}

int VPreLex::currentStartState() {
    return YY_START;
}

void VPreLex::dumpSummary() {
    return;
	//cout<<"-  pp::dumpSummary  curBuf="<<(void*)(currentBuffer());
#ifdef FLEX_DEBUG  // Else peeking at internals may cause portability issues
   ussize_t left = (yy_n_chars
		    - (yy_c_buf_p
		       -currentBuffer()->yy_ch_buf));
  //  cout<<" left="<<dec<<left;
#endif
    cout<<endl;
}

int VPreLex::getBufSize() 
{
      return  (yy_n_chars   - (yy_c_buf_p-currentBuffer()->yy_ch_buf));
}

void VPreLex::dumpStack() {
    // For debug use
    return;
	dumpSummary();
    stack<VPreStream*> tmpstack = LEXP->m_streampStack;
    while (!tmpstack.empty()) {
	VPreStream* streamp = tmpstack.top();
	cout<<"-    bufferStack["<<(void*)(streamp)<<"]: "
	    <<" at="<<streamp->m_curFilelinep
	    <<" nBuf="<<streamp->m_buffers.size()
	    <<" size0="<<(streamp->m_buffers.empty() ? 0 : streamp->m_buffers.front().length())
	    <<(streamp->m_eof?" [EOF]":"")
	    <<(streamp->m_file?" [FILE]":"");
	cout<<endl;
	tmpstack.pop();
    }
}

string VPreLex::cleanDbgStrg(const string& in) {
    string out = in;
    string::size_type pos;
    while ((pos=out.find("\n")) != string::npos) { out.replace(pos, 1, "\\n"); }
    while ((pos=out.find("\r")) != string::npos) { out.replace(pos, 1, "\\r"); }
    return out;
}

void VPreLex::unused() {
    if (0) {
	// Prevent unused warnings
	yy_top_state();
    }
}

void VPreLex::initBuffer(const string & buf) {
    m_bufferState = yy_create_buffer(NULL, YY_BUF_SIZE);
    yy_switch_to_buffer(m_bufferState);
    yyrestart(NULL);
    scanBytes(buf);
}

/*###################################################################
 * Local Variables:
 * mode: C++
 * End:
 */
